name: Gonzo's Assessment CI/CD Pipeline
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        type: choice
        description: Python version to deploy
        options:
        - 3.8
        - 3.9
      packages:
        type: choice
        description: Python packages to deploy
        options:
        - boto3
        - json
      specs:
        type: choice
        description: Mem/CPU/GPU requests
        options:
        - small
        - medium
        - big

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up requirements.txt based on package selection
      run: |
        # Default to boto3 for push events or if boto3 is selected
        PACKAGE="boto3==1.37.18"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ "${{ github.event.inputs.packages }}" = "json" ]; then
            PACKAGE="python-json-logger==2.0.7"  # Override for json selection
          fi
        fi
        echo "$PACKAGE" > requirements.txt
        echo "Generated requirements.txt with: $PACKAGE"

    - name: Build and push Docker image
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          PYTHON_VERSION="3.8"  # Default for push events from main
        else
          PYTHON_VERSION=${{ github.event.inputs.image }}
        fi
        docker build -t ${{ secrets.DOCKER_USERNAME }}/assessment:latest --build-arg PYTHON_VERSION="$PYTHON_VERSION" .
        docker push ${{ secrets.DOCKER_USERNAME }}/assessment:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build

    steps:
      # Checkout repository under $GITHUB_WORKSPACE path
      - name: Respository checkout
        uses: actions/checkout@v4

      # Kubectl and Helm install
      - name: Kubectl and Helm install
        shell: bash
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
          KUBE_VERSION: v1.32.0
          HELM_VERSION: v3.16.4
        run: |
          curl -Ls https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl -o kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/kubectl
          curl -Ls https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz -o helm-linux-amd64.tar.gz && tar -xzf helm-linux-amd64.tar.gz && mv linux-amd64/helm /usr/local/bin/helm
          echo ${KUBECONFIG} | base64 --decode > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          echo ${GITHUB_WORKSPACE}
          echo "KUBECONFIG=${GITHUB_WORKSPACE}/kubeconfig.yaml" >> $GITHUB_ENV

      # Ddeployment
      - name: Deployment
        working-directory: ./deploy
        shell: bash
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          echo "Here we would do the deployment steps with kubectl or helm"
          #kubectl apply -f assessment.yaml
          # Default to small specs for push events
          SPECS="small"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SPECS=${{ github.event.inputs.specs }}
            echo "Deploying with Helm the following for size: $SPECS"
            helm template assessment ./charts --values charts/values/specs.yaml --set specs=$SPECS
            #helm upgrade --install assessment ./charts --values charts/values/specs.yaml --set specs=$SPECS
          else
            echo "Deploying with kubectl"
            #kubectl apply -f assessment.yaml
          fi
